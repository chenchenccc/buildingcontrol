package com.building.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildingExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public BuildingExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    protected BuildingExample(BuildingExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table building
     *
     * @ibatorgenerated Fri May 22 23:01:52 CST 2015
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andBuildingNameIsNull() {
            addCriterion("building_name is null");
            return this;
        }

        public Criteria andBuildingNameIsNotNull() {
            addCriterion("building_name is not null");
            return this;
        }

        public Criteria andBuildingNameEqualTo(String value) {
            addCriterion("building_name =", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameNotEqualTo(String value) {
            addCriterion("building_name <>", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameGreaterThan(String value) {
            addCriterion("building_name >", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameGreaterThanOrEqualTo(String value) {
            addCriterion("building_name >=", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameLessThan(String value) {
            addCriterion("building_name <", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameLessThanOrEqualTo(String value) {
            addCriterion("building_name <=", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameLike(String value) {
            addCriterion("building_name like", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameNotLike(String value) {
            addCriterion("building_name not like", value, "buildingName");
            return this;
        }

        public Criteria andBuildingNameIn(List values) {
            addCriterion("building_name in", values, "buildingName");
            return this;
        }

        public Criteria andBuildingNameNotIn(List values) {
            addCriterion("building_name not in", values, "buildingName");
            return this;
        }

        public Criteria andBuildingNameBetween(String value1, String value2) {
            addCriterion("building_name between", value1, value2, "buildingName");
            return this;
        }

        public Criteria andBuildingNameNotBetween(String value1, String value2) {
            addCriterion("building_name not between", value1, value2, "buildingName");
            return this;
        }

        public Criteria andBuildingTypeIsNull() {
            addCriterion("building_type is null");
            return this;
        }

        public Criteria andBuildingTypeIsNotNull() {
            addCriterion("building_type is not null");
            return this;
        }

        public Criteria andBuildingTypeEqualTo(Integer value) {
            addCriterion("building_type =", value, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeNotEqualTo(Integer value) {
            addCriterion("building_type <>", value, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeGreaterThan(Integer value) {
            addCriterion("building_type >", value, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("building_type >=", value, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeLessThan(Integer value) {
            addCriterion("building_type <", value, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeLessThanOrEqualTo(Integer value) {
            addCriterion("building_type <=", value, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeIn(List values) {
            addCriterion("building_type in", values, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeNotIn(List values) {
            addCriterion("building_type not in", values, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeBetween(Integer value1, Integer value2) {
            addCriterion("building_type between", value1, value2, "buildingType");
            return this;
        }

        public Criteria andBuildingTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("building_type not between", value1, value2, "buildingType");
            return this;
        }

        public Criteria andSuperIdIsNull() {
            addCriterion("super_id is null");
            return this;
        }

        public Criteria andSuperIdIsNotNull() {
            addCriterion("super_id is not null");
            return this;
        }

        public Criteria andSuperIdEqualTo(Integer value) {
            addCriterion("super_id =", value, "superId");
            return this;
        }

        public Criteria andSuperIdNotEqualTo(Integer value) {
            addCriterion("super_id <>", value, "superId");
            return this;
        }

        public Criteria andSuperIdGreaterThan(Integer value) {
            addCriterion("super_id >", value, "superId");
            return this;
        }

        public Criteria andSuperIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("super_id >=", value, "superId");
            return this;
        }

        public Criteria andSuperIdLessThan(Integer value) {
            addCriterion("super_id <", value, "superId");
            return this;
        }

        public Criteria andSuperIdLessThanOrEqualTo(Integer value) {
            addCriterion("super_id <=", value, "superId");
            return this;
        }

        public Criteria andSuperIdIn(List values) {
            addCriterion("super_id in", values, "superId");
            return this;
        }

        public Criteria andSuperIdNotIn(List values) {
            addCriterion("super_id not in", values, "superId");
            return this;
        }

        public Criteria andSuperIdBetween(Integer value1, Integer value2) {
            addCriterion("super_id between", value1, value2, "superId");
            return this;
        }

        public Criteria andSuperIdNotBetween(Integer value1, Integer value2) {
            addCriterion("super_id not between", value1, value2, "superId");
            return this;
        }

        public Criteria andUserIdIsNull() {
            addCriterion("user_id is null");
            return this;
        }

        public Criteria andUserIdIsNotNull() {
            addCriterion("user_id is not null");
            return this;
        }

        public Criteria andUserIdEqualTo(Integer value) {
            addCriterion("user_id =", value, "userId");
            return this;
        }

        public Criteria andUserIdNotEqualTo(Integer value) {
            addCriterion("user_id <>", value, "userId");
            return this;
        }

        public Criteria andUserIdGreaterThan(Integer value) {
            addCriterion("user_id >", value, "userId");
            return this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("user_id >=", value, "userId");
            return this;
        }

        public Criteria andUserIdLessThan(Integer value) {
            addCriterion("user_id <", value, "userId");
            return this;
        }

        public Criteria andUserIdLessThanOrEqualTo(Integer value) {
            addCriterion("user_id <=", value, "userId");
            return this;
        }

        public Criteria andUserIdIn(List values) {
            addCriterion("user_id in", values, "userId");
            return this;
        }

        public Criteria andUserIdNotIn(List values) {
            addCriterion("user_id not in", values, "userId");
            return this;
        }

        public Criteria andUserIdBetween(Integer value1, Integer value2) {
            addCriterion("user_id between", value1, value2, "userId");
            return this;
        }

        public Criteria andUserIdNotBetween(Integer value1, Integer value2) {
            addCriterion("user_id not between", value1, value2, "userId");
            return this;
        }

        public Criteria andIsDelIsNull() {
            addCriterion("is_del is null");
            return this;
        }

        public Criteria andIsDelIsNotNull() {
            addCriterion("is_del is not null");
            return this;
        }

        public Criteria andIsDelEqualTo(Integer value) {
            addCriterion("is_del =", value, "isDel");
            return this;
        }

        public Criteria andIsDelNotEqualTo(Integer value) {
            addCriterion("is_del <>", value, "isDel");
            return this;
        }

        public Criteria andIsDelGreaterThan(Integer value) {
            addCriterion("is_del >", value, "isDel");
            return this;
        }

        public Criteria andIsDelGreaterThanOrEqualTo(Integer value) {
            addCriterion("is_del >=", value, "isDel");
            return this;
        }

        public Criteria andIsDelLessThan(Integer value) {
            addCriterion("is_del <", value, "isDel");
            return this;
        }

        public Criteria andIsDelLessThanOrEqualTo(Integer value) {
            addCriterion("is_del <=", value, "isDel");
            return this;
        }

        public Criteria andIsDelIn(List values) {
            addCriterion("is_del in", values, "isDel");
            return this;
        }

        public Criteria andIsDelNotIn(List values) {
            addCriterion("is_del not in", values, "isDel");
            return this;
        }

        public Criteria andIsDelBetween(Integer value1, Integer value2) {
            addCriterion("is_del between", value1, value2, "isDel");
            return this;
        }

        public Criteria andIsDelNotBetween(Integer value1, Integer value2) {
            addCriterion("is_del not between", value1, value2, "isDel");
            return this;
        }
    }
}