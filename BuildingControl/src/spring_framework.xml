<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">
	
	<!-- 数据库配置jndi-->
	<!--<bean name="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/mysql"></property>
	</bean>
	 
	--><!-- 读取ibatis配置文件 -->
	<!-- org.springframework.orm.ibatis.SqlMapClientFactoryBean -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation">
			<value>classpath:ibatis_framework.xml</value>
		</property>
	</bean>
	
	<bean id="dataSource" 
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property> 
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/building_control_db"></property> 
		<property name="username" value="root"></property> 
		<property name="password" value="123456"></property> 
	</bean> 
	
	
	
	<!-- Spring iBatisTemplate -->
	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient"></property>
	</bean>
	
	<!-- 事物管理器 ibatis -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 代理工厂 -->
	<!-- 代理类的配置,将实现层与实务层剥离 ,采用spring的AOP技术实现，只需配置就好，无需新建类 -->
	<bean id="baseTransactionProxy"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		abstract="true">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>    <!-- 增 -->
				<prop key="update*">PROPAGATION_REQUIRED</prop>  <!-- 改 -->
				<prop key="del*">PROPAGATION_REQUIRED</prop>     <!-- 删 -->
				<prop key="modify*">PROPAGATION_REQUIRED</prop>  <!-- 改 -->
			</props>
		</property>
	</bean>
	<bean name="createImageAction" class="com.building.web.CreateImageAction" scope="prototype"></bean>
	<bean name="loginAction" class="com.building.web.LoginAction" scope="prototype">
		<property name="userServiceProxy" ref="userServiceProxy"></property>
		<property name="roleServiceProxy" ref="roleServiceProxy"></property>
	</bean>
	

	<!-- User实体Bean -->
	<bean id="userDao" class="com.building.dao.impl.UserDAOImpl" >
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"></property>
	</bean>
	
	<bean id="userService" class="com.building.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
		<property name="userHasRoleDao" ref="userHasRoleDao"></property>
		<property name="roleDao" ref="roleDao"></property>
	</bean>
	
	<bean id="userServiceProxy" parent="baseTransactionProxy">
		<property name="target" ref="userService"></property>
	</bean>
	
	<bean name="aliasUserAction" class="com.building.web.UserAction" scope="prototype">
		<property name="userServiceProxy" ref="userServiceProxy"></property>
	</bean>
	
	
	
	<!-- UserHasRole实体Bean -->
	<bean id="userHasRoleDao" class="com.building.dao.impl.UserHasRoleDAOImpl" >
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"></property>
	</bean>
	
	<bean id="userHasRoleService" class="com.building.service.impl.UserHasRoleServiceImpl">
		<property name="userHasRoleDao" ref="userHasRoleDao"></property>
	</bean>
	
	<bean id="userHasRoleServiceProxy" parent="baseTransactionProxy">
		<property name="target" ref="userHasRoleService"></property>
	</bean>
	
	<bean name="aliasUserHasRoleAction" class="com.building.web.UserHasRoleAction" scope="prototype">
		<property name="userHasRoleServiceProxy" ref="userHasRoleServiceProxy"></property>
	</bean>
	
	
	<!-- Role实体Bean -->
	<bean id="roleDao" class="com.building.dao.impl.RoleDAOImpl" >
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"></property>
	</bean>
	
	<bean id="roleService" class="com.building.service.impl.RoleServiceImpl">
		<property name="roleDao" ref="roleDao"></property>
	</bean>
	
	<bean id="roleServiceProxy" parent="baseTransactionProxy">
		<property name="target" ref="roleService"></property>
	</bean>
	
	<bean name="aliasRoleAction" class="com.building.web.RoleAction" scope="prototype">
		<property name="roleServiceProxy" ref="roleServiceProxy"></property>
	</bean>
	
	
	<!-- RoleHasBuilding实体Bean -->
	<bean id="roleHasBuildingDao" class="com.building.dao.impl.RoleHasBuildingDAOImpl" >
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"></property>
	</bean>
	
	<bean id="roleHasBuildingService" class="com.building.service.impl.RoleHasBuildingServiceImpl">
		<property name="roleHasBuildingDao" ref="roleHasBuildingDao"></property>
	</bean>
	
	<bean id="roleHasBuildingServiceProxy" parent="baseTransactionProxy">
		<property name="target" ref="roleHasBuildingService"></property>
	</bean>
	
	<bean name="aliasRoleHasBuildingAction" class="com.building.web.RoleHasBuildingAction" scope="prototype">
		<property name="roleHasBuildingServiceProxy" ref="roleHasBuildingServiceProxy"></property>
	</bean>
	
	
	<!-- Building实体Bean -->
	<bean id="buildingDao" class="com.building.dao.impl.BuildingDAOImpl" >
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"></property>
	</bean>
	
	<bean id="buildingService" class="com.building.service.impl.BuildingServiceImpl">
		<property name="buildingDao" ref="buildingDao"></property>
	</bean>
	
	<bean id="buildingServiceProxy" parent="baseTransactionProxy">
		<property name="target" ref="buildingService"></property>
	</bean>
	
	<bean name="aliasBuildingAction" class="com.building.web.BuildingAction" scope="prototype">
		<property name="buildingServiceProxy" ref="buildingServiceProxy"></property>
	</bean>
	
	
	
	<!-- Device实体Bean -->
	<bean id="deviceDao" class="com.building.dao.impl.DeviceDAOImpl" >
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"></property>
	</bean>
	
	<bean id="deviceService" class="com.building.service.impl.DeviceServiceImpl">
		<property name="deviceDao" ref="deviceDao"></property>
	</bean>
	
	<bean id="deviceServiceProxy" parent="baseTransactionProxy">
		<property name="target" ref="deviceService"></property>
	</bean>
	
	<bean name="aliasDeviceAction" class="com.building.web.DeviceAction" scope="prototype">
		<property name="deviceServiceProxy" ref="deviceServiceProxy"></property>
	</bean>
	
	
	
	<!-- Schedule实体Bean -->
	<bean id="scheduleDao" class="com.building.dao.impl.ScheduleDAOImpl" >
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"></property>
	</bean>
	
	<bean id="scheduleService" class="com.building.service.impl.ScheduleServiceImpl">
		<property name="scheduleDao" ref="scheduleDao"></property>
	</bean>
	
	<bean id="scheduleServiceProxy" parent="baseTransactionProxy">
		<property name="target" ref="scheduleService"></property>
	</bean>
	
	<bean name="aliasScheduleAction" class="com.building.web.ScheduleAction" scope="prototype">
		<property name="scheduleServiceProxy" ref="scheduleServiceProxy"></property>
	</bean>
	



</beans>